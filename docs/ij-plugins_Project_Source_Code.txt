~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ij-plugins Project Source Code
       v.2003-12-23
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=========================
ij-plugins CVS Repository
=========================

Currently there are 4 projects within ij-plugins CVS repository:

ij-plugins: 
  Contains majority of the code for plugins. Currently all of the plugins there
  are contained in the 3D Toolkit plugin bundle.
  
imageio:    
  Code related to JAI-image I/O plugin bundle. Uses the JAI Sample IO code
  released by SUN (see the next project).
  
Sun_JAI_Sample_IO_Source_Code_v_1.1.1:
  JAI I/O source code released bu SUN. Probably the only thing added is a Ant
  build file to compile the code and create a JAR. Note that original source
  code had no package structure.   
  
VTK-Examples:
  Source code for VTK-Examples. This really has no dependencies on Image/J. It
  is hosted within ij-plugins project "temporarily".


Please see ij-plugins website for more general information about the projects.

SOURCE CODE
===========

Generally source code for each project is organized into a similar directory 
structure (at least this is such intention :)

project_root
  |
  |----- build.xml
  |
  |----- lib
  |
  |----- src
  |
  |----- docs

build.xml:
  Apache Ant build file for building, testing, and creation of distribution 
  files. The intent is to have an IDE independent means of rebuilding a project.
  
lib:
  Possible libraries (JARs) needed to build project.
  
src:
  Project source code.
  
docs:
  Documentation, except generated documentation like javadocs. Generated
  documentation will be created from Ant and go under output/docs or dist/docs
  
Currently each of the projects, except Sun_JAI_Sample_IO_Source_Code_v_1.1.1 
deviate somewhat from this structure.

ij-plugins
----------

ij-plugins CVS project has main build.xml file, a 'lib' directory, and two
parallel directory trees: Toolkit and Plugins. Each have its own Ant build file.
The Toolkit directory contains library code organized into typical Java
packages. The Plugins directory contains plugin 'drivers' that follow Image/J
plugin naming convention, subdirectories group related plugins (3D IO, 3D
Toolkit, VTK Filters).

A recent feature of Image/J enables installing plugins packaged into JAR files
through a declaration file included in the JAR. This new feature makes directory
structure of ij-plugins obsolete. In particular there is no longer need for the
Plugins source directory since it role can be taken by the declaration file
included in the JAR.

There are some junit test cases. More will be include with new source. Test
cases for older code will be added.

imageio
-------

imageio CVS project contains simple the source code, directly in its root
directory. Structure of this project will soon change and it is updated to make
use of the new Image/J JAR plugin installation facility. For instance PNG writer
will be added to File/Save As menu, JAI reader will be added to File/Import menu

VTK-Examples
------------

Directory structure of the VTK-Examples is set to match directory structure of
the VTK source code, rather than a typical Java application.


CODING STANDARDS
================

There are no formalized coding standards, though, a typical Java convention
described at http://java.sun.com/docs/codeconv/ is generally followed.

Please put javadoc comments to describe API. UML documentation encouraged :)

Please add comments when checking in code into CVS. The comment should describe
intention of the commit rather than content content.

Please use junit test cases when possible. Test cases are put together with the
source they test. JUnit test classes have prefix Test, for instance, VtkDecoder
class may have a corresponding TestVtkDecoder unit test. Test code can be easily
filtered out from the distribution using Ant.
