<?xml version="1.0"?>
<project name="ij-plugins" default="run" basedir=".">
    <description>
        ij-plugins Toolkit
    </description>

    <!--
      @TODO: Readme files for the distribution.
      @TODO: Package the binary distribution.
    -->

    <!-- Package name and version -->
    <property name="package.name" value="ij-plugins_toolkit"/>
    <property name="package.version" value="1.0"/>

    <!-- Customize properties, e.g., cvs.root.-->
    <property file="build.properties"/>

    <!-- In case ant.home is not defined, set default value -->
    <property name="ant.home" location="/usr/share/ant"/>

    <!-- CVS setup -->
    <property name="cvs.root" value=":pserver:anonymous@cvs.sourceforge.net:/cvsroot/ij-plugins"/>
    <property name="cvs.module" value="ij-plugins"/>

    <!-- Set default properties for this build -->
    <property name="base.dir" location="${basedir}"/>
    <property name="lib.dir" location="${base.dir}/lib"/>
    <property name="src.dir" location="${base.dir}/src"/>
    <property name="docs.dir" location="${base.dir}/docs"/>

    <!-- Generated directories -->
    <property name="build.dir" location="${base.dir}/build"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>

    <property name="checkout.dir" location="${build.dir}/checkout"/>
    <property name="dist.dir" location="${base.dir}/dist"/>
    <property name="sandbox.dir" location="${base.dir}/sandbox"/>
    <property name="sandbox.plugins.dir" location="${sandbox.dir}/plugins"/>
    <property name="jar.dir" location="${sandbox.plugins.dir}"/>
    <property name="javadoc.dir" location="${dist.dir}/api"/>
    <property name="output.dir" location="output"/>

    <property name="ij.jar" location="${lib.dir}/ij.jar"/>
    <property name="license.file" location="License.txt"/>


    <fileset id="library.files"
             dir="${lib.dir}">
        <include name="**/commons-beanutils-core-*.jar"/>
        <include name="**/commons-logging-*.jar"/>
    </fileset>

    <fileset id="config.files"
             dir="${src.dir}">
        <include name="**/*.config"/>
    </fileset>

    <fileset id="resource.files"
             dir="${src.dir}">
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
    </fileset>

    <fileset id="docs.files"
             dir="${docs.dir}">
        <include name="**/*.html"/>
        <include name="**/*.css"/>
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
    </fileset>


    <path id="compile.classpath">
        <pathelement location="${ij.jar}"/>
        <fileset refid="library.files"/>
    </path>

    <!-- Test directory structure -->
    <property name="junit.fork" value="yes"/>
    <property name="test.dir" location="${base.dir}/test"/>
    <property name="test.src.dir" location="${test.dir}/src"/>
    <property name="test.data.dir" location="${test.dir}/data"/>
    <property name="test.lib.dir" location="${test.dir}/lib"/>
    <property name="test.build.dir" location="${build.dir}/test"/>
    <property name="test.build.classes.dir" location="${test.build.dir}/classes"/>
    <property name="test.build.results.dir" location="${test.build.dir}/results"/>
    <property name="test.build.reports.dir" location="${test.build.dir}/reports"/>

    <!-- test classpath -->
    <path id="test.classpath">
        <path refid="compile.classpath"/>
        <pathelement location="${build.classes.dir}"/>
        <pathelement location="${test.lib.dir}/junit-3.8.1.jar"/>
        <pathelement location="${test.build.classes.dir}"/>
    </path>


    <!-- ================= -->
    <!--  Primary targets  -->
    <!-- ================= -->

    <target name="run"
            description="Test run ImageJ with plugins"
            depends="jar">

        <java jar="${ij.jar}"
              dir="${sandbox.dir}"
              fork="true">
        </java>

    </target>

    <target name="dist"
            description="Create distribution files."
            depends="dist-from-cvs">
    </target>


    <target name="jar" depends="compile"
            description="Create plugins' JAR">

        <!-- Create library jar -->
        <jar destfile="${jar.dir}/${package.name}.jar"
             basedir="${build.classes.dir}"
             compress="true">
            <fileset refid="resource.files"/>
            <zipgroupfileset refid="library.files"/>
        </jar>
    </target>

    <!-- Create API documentation -->
    <target name="javadoc"
            depends="compile"
            description="Create Javadoc API documentation">

        <property name="javadoc.window.title" value="${package.name} ${package.version} API"/>
        <property name="javadoc.header" value="${javadoc.window.title}"/>

        <javadoc verbose="no"
                 packagenames="*"
                 destdir="${javadoc.dir}"
                 windowtitle="${javadoc.window.title}"
                 header="${javadoc.header}">
            <fileset dir="src" defaultexcludes="yes">
                <include name="**/*.java"/>
                <exclude name="**/**Test.java"/>
                <exclude name="**/**TestCase.java"/>
            </fileset>
            <footer>
                <![CDATA[<a href="http://ij-plugins.sourceforge.net">
            <img src="http://sourceforge.net/sflogo.php?group_id=49871&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net_Logo">
            </a>]]>
            </footer>
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <target name="clean"
            description="Remove internediate files and directories created during build.">
        <delete dir="${checkout.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="clean-all"
            depends="clean, clean-test"
            description="Remove all files and directories created during build.">
        <delete dir="${jar.dir}"/>
        <delete dir="${sandbox.plugins.dir}"/>
        <delete dir="${sandbox.dir}"/>
        <delete dir="${javadoc.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- Run unit tests -->
    <target name="test"
            depends="run-tests"
            description="Run unit tests"/>


    <!-- ================= -->
    <!-- Secondary targets -->
    <!-- ================= -->

    <!-- Initialize  -->
    <target name="init">
        <echo message="Building ${ant.project.name}"/>
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${sandbox.dir}"/>
        <mkdir dir="${sandbox.plugins.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${javadoc.dir}"/>
        <mkdir dir="${checkout.dir}"/>
    </target>

    <target name="compile"
            depends="init">
        <javac
                srcdir="${src.dir}"
                destdir="${build.classes.dir}"
                debug="on"
                target="1.4"
                source="1.4">
            <classpath refid="compile.classpath"/>
            <exclude name="**/*Test.java"/>
        </javac>

        <copy todir="${build.classes.dir}" overwrite="true">
            <fileset refid="config.files"/>
            <filterset>
                <filter token="BUILD_DATE" value="${DSTAMP}"/>
                <filter token="BUILD_VERSION" value="${package.version}"/>
            </filterset>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset refid="resource.files"/>
        </copy>
        <!--        <copy todir="${build.classes.dir}/docs">-->
        <!--            <fileset refid="docs.files"/>-->
        <!--        </copy>-->
    </target>

    <!-- Build dictributin from current content of CVS -->
    <target name="dist-from-cvs" depends="init">

        <property name="cvs.dir" location="${checkout.dir}/${cvs.module}"/>

        <!-- ................... -->
        <!-- Source distribution -->
        <!-- ................... -->
        <!-- Cleanup CVS checkout directory -->
        <delete dir="${cvs.dir}"/>
        <!-- Fresh checkout from CVS -->
        <echo message="CVS ROOT: ${cvs.root}"/>
        <antcall target="checkout" inheritall="false">
            <param name="cvs.root" value="${cvs.root}"/>
        </antcall>

        <!-- Copy dependencies -->
        <mkdir dir="${cvs.dir}/lib"/>
        <copy file="${ij.jar}" todir="${cvs.dir}/lib"/>
        <copy file="${license.file}" todir="${cvs.dir}"/>

        <!-- Provide custom 'build.properties' file -->
        <move file="${cvs.dir}/build.properties.template" tofile="${cvs.dir}/build.properties"/>

        <!-- ZIP source -->
        <zip basedir="${cvs.dir}"
             destfile="${dist.dir}/${package.name}_src_${package.version}_${DSTAMP}.zip"/>

        <!-- ................................................... -->
        <!-- Binary distribution from actual distribution source -->
        <!-- ................................................... -->
        <ant antfile="${cvs.dir}/build.xml" target="jar">
            <property name="jar.dir" location="${base.dir}/dist"/>
        </ant>

        <!-- ZIP binaries -->
        <zip basedir="${base.dir}/dist"
             includes="${package.name}.jar"
             destfile="${dist.dir}/${package.name}_bin_${package.version}_${DSTAMP}.zip"/>

    </target>

    <!-- Checkout sources drom CVS repository -->
    <target name="checkout"
            depends="init">
        <!-- Checkout wrappers for ImageJ -->
        <cvs cvsRoot="${cvs.root}"
             command="checkout -P"
             package="${cvs.module}"

             dest="${checkout.dir}"/>
    </target>

    <!-- Target: changelog -->
    <target name="changelog" depends="init" description="">
        <!-- changelog target properties -->
        <property name="changelog.start" value="29 Feb 2004"/>
        <property name="changelog.title" value="${package.name} Changelog"/>
        <property name="changelog.cvsweb"
                  value="http://cvs.sourceforge.net/viewcvs.py/ij-plugins/"/>
        <cvschangelog
                dir="${base.dir}"
                destfile="${build.dir}/changelog.xml"
                start="${changelog.start}"
                />
        <style
                in="${build.dir}/changelog.xml"
                out="${dist.dir}/changelog.html"
                style="${ant.home}/etc/changelog.xsl">
            <param name="title" expression="${changelog.title}"/>
            <param name="module" expression="${cvs.module}"/>
            <param name="cvsweb" expression="${changelog.cvsweb}"/>
        </style>
    </target>


    <!-- Target: tagdiff -->
    <target name="tagdiff" depends="init">
        <property name="tagdiff.destfile.xml" location="${build.dir}/tagdiff.xml"/>
        <property name="tagdiff.destfile.html" location="${dist.dir}/tagdiff.html"/>
        <property name="tagdiff.starttag" value="LatestRelease"/>
        <property name="tagdiff.endtag" value="HEAD"/>
        <property name="tagdiff.title" value="${package.name} Tag Diff"/>
        <property name="tagdiff.cvsweb" value="${changelog.cvsweb}"/>

        <cvstagdiff
                cvsroot="${cvs.root}"
                destfile="${tagdiff.destfile.xml}"
                package="${cvs.module}"
                starttag="${tagdiff.starttag}"
                endtag="${tagdiff.endtag}"
                compression="true"
                />
        <style
                in="${tagdiff.destfile.xml}"
                out="${tagdiff.destfile.html}"
                style="${ant.home}/etc/tagdiff.xsl">
            <param name="title" expression="${tagdiff.title}"/>
            <param name="module" expression="${cvs.module}"/>
            <param name="cvsweb" expression="${tagdiff.cvsweb}"/>
        </style>
    </target>


    <!-- ================= -->
    <!-- Test targets -->
    <!-- ================= -->

    <target name="init-test" depends="init">
        <!-- Create the build directory structure used by test -->
        <mkdir dir="${test.build.dir}"/>
        <mkdir dir="${test.build.classes.dir}"/>
        <mkdir dir="${test.build.results.dir}"/>
        <mkdir dir="${test.build.reports.dir}"/>
    </target>

    <target name="test-compile" depends="compile,init-test">
        <javac
                srcdir="${test.src.dir}"
                destdir="${test.build.classes.dir}">
            <classpath refid="test.classpath"/>
            <include name="**/*Test*.java"/>
        </javac>
    </target>

    <target name="run-tests" depends="test-compile">
        <junit printsummary="no"
               errorproperty="test.failed"
               failureproperty="test.failed"
               fork="${junit.fork}">
            <classpath refid="test.classpath"/>

            <sysproperty key="test.data.dir" value="${test.data.dir}"/>

            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>

            <!-- run single testcase if defined -->
            <!--
            <test name="${testcase}" if="testcase"/>
            -->

            <!-- run all test cases if testcase not explicitly defined -->
            <batchtest todir="${test.build.results.dir}" unless="testcase">
                <fileset dir="${test.build.classes.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${test.build.reports.dir}">
            <fileset dir="${test.build.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.build.reports.dir}"/>
        </junitreport>

        <fail if="test.failed">
            Unit test failed. Check log or reports for details.
        </fail>
    </target>

    <target name="clean-test">
        <delete dir="${test.build.results.dir}"/>
        <delete dir="${test.build.classes.dir}"/>
        <delete dir="${test.build.dir}"/>
    </target>


</project>
